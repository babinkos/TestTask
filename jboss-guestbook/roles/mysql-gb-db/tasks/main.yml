---
# tasks file for mysql-gb-db
   
- debug:
    msg: "{{ mysql_databases[0]['name'] }} ; {{ gb_dirname + '/' + gb_dbdump }}"
  
- name: Check that the db dump file exists
  become: yes
  stat:
    path: "{{ gb_dirname + '/' + gb_dbdump }}"
  register: dumpfilestate

- debug:
    msg: "filepath {{ gb_dirname + '/' + gb_dbdump }} state exists {{ dumpfilestate.stat.exists }}"

- name: Download app zip and Unarchive if sql dump file is not existing
  become: yes
  unarchive:
    src: "/tmp/{{ app_zipfile }}"
# uncomment src and remote_src after tests
#    src: "{{ application_repo }}"
    dest: "{{ gb_dirname }}"
    creates: "{{ gb_dirname + '/' + gb_dbdump }}"
#    remote_src: yes
  when: dumpfilestate.stat.exists == False
  
- name: Check that the db dump file finally exists
  become: yes
  stat:
    path: "{{ gb_dirname + '/' + gb_dbdump }}"
  register: dumpfilestate

- debug:
    msg: "filepath {{ gb_dirname + '/' + gb_dbdump }} state exists {{ dumpfilestate.stat.exists }}"

- name: Restore database
  mysql_db:
    name: "{{ mysql_databases[0]['name'] }}"
#    login_user: "{{ mysql_users[0]['name'] }}"
#    login_password: "{{ mysql_users[0]['password'] }}"
    login_user: "root"
    login_password: "{{ mysql_root_password }}"
    state: import
    target: "{{ gb_dirname + '/' + gb_dbdump }}"
  when: dumpfilestate.stat.exists == True