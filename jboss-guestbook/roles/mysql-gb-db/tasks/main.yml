---
# tasks file for mysql-gb-db
   
- debug:
    msg: "{{ mysql_databases[0]['name'] }} ; {{ jboss_deployment_dir + '/' + gb_dbdump }}"
  
- name: Check that the db dump file exists
  become: yes
  stat:
    path: "{{ jboss_deployment_dir + '/' + gb_dbdump }}"
  register: dumpfilestate

- name: Check that in tmp app_zip file exists
  become: yes
  stat:
    path: "/tmp/{{ app_zipfile }}"
  register: localappfilestate

- debug:
    msg: "filepath {{ jboss_deployment_dir + '/' + gb_dbdump }} state exists {{ dumpfilestate.stat.exists }}"

- name: use local app zip from tmp and Unarchive if sql dump file is not existing
  become: yes
  unarchive:
    src: "/tmp/{{ app_zipfile }}"
    dest: "{{ jboss_deployment_dir }}"
    creates: "{{ jboss_deployment_dir + '/' + gb_dbdump }}"
    remote_src: yes
  when: dumpfilestate.stat.exists == False and localappfilestate.stat.exists == True


- name: Download app zip and Unarchive if sql dump file is not existing
  become: yes
  unarchive:
    src: "{{ application_repo }}"
    dest: "{{ jboss_deployment_dir }}"
    creates: "{{ jboss_deployment_dir + '/' + gb_dbdump }}"
    remote_src: yes
  when: dumpfilestate.stat.exists == False and localappfilestate.stat.exists == False
  
- name: Check that the db dump file finally exists
  become: yes
  stat:
    path: "{{ jboss_deployment_dir + '/' + gb_dbdump }}"
  register: dumpfilestate 

- debug:
    msg: "filepath {{ jboss_deployment_dir + '/' + gb_dbdump }} state exists {{ dumpfilestate.stat.exists }}"

- name: Restore database
  mysql_db:
    name: "{{ mysql_databases[0]['name'] }}"
    login_user: "{{ mysql_users[0]['name'] }}"
    login_host: "{{ hostvars[inventory_hostname]['groups']['db-servers'][0] }}"
    login_password: "{{ mysql_users[0]['password'] }}"
    state: import
    target: "{{ jboss_deployment_dir + '/' + gb_dbdump }}"
  when: dumpfilestate.stat.exists == True