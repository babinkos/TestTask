---
# tasks file for jboss/wildfly
- debug:
    msg: "System {{ inventory_hostname }} has OS type: {{ ansible_distribution }}"

- name: install openjdk, unzip
  become: yes
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - 'default-jdk'
    - 'unzip'
    - 'python-lxml'
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Check that the jboss directory already exists
  become: yes
  stat:
    path: "{{ jboss_rootdir }}"
  register: dirstate

- debug:
    msg: "filepath {{ jboss_rootdir }} state exists {{ dirstate.stat.exists }}"

- name: Check that the jboss jar file already exists
  become: yes
  stat:
    path: "{{ jboss_rootdir + '/' + jboss_jarfile }}"
  register: jarstate

- debug:
    msg: "filepath {{ jboss_rootdir + '/' + jboss_jarfile }} state exists {{ jarstate.stat.exists }}"

- name: Create subdir for jboss app if not exists
  become: yes
  file:
    path: "{{ jboss_rootdir }}"
    state: directory
    mode: 0755
  when: dirstate.stat.exists == False

- name: Check that the jboss directory exists or not
  become: yes
  stat:
    path: "{{ jboss_rootdir }}"
  register: dirstate

- debug:
    msg: "filepath {{ jboss_rootdir }} state exists {{ dirstate.stat.exists }}"
  
- name: Download app zip and Unarchive
  become: yes
  unarchive:
# TODO : test and if successful - move to ancestor wildfly12 = http://download.jboss.org/wildfly/12.0.0.Final/wildfly-12.0.0.Final.zip  
# old (jboss7) url for history - http://download.jboss.org/jbossas/7.1/jboss-as-7.1.1.Final/jboss-as-7.1.1.Final.zip
    src: "/tmp/{{ jboss_zipfilename }}"
# uncomment src and remote_src after tests
#    src: "{{ jboss_repo }}"
    dest: "{{ jboss_unzip_dirname }}"
    creates: "{{ jboss_rootdir + '/' + jboss_jarfile }}"
#    remote_src: yes
  when: jarstate.stat.exists == False and  dirstate.stat.exists == True

- debug:
    msg: "clause to download zip was  when:{{ jarstate.stat.exists == False and  dirstate.stat.exists == True }}"

- name: Check that the jboss jar file exists or not
  become: yes
  stat:
    path: "{{ jboss_rootdir + '/' + jboss_jarfile }}"
  register: jarstate
 
- debug:
    msg: "filepath {{ jboss_rootdir + '/' + jboss_jarfile }} state exists {{ jarstate.stat.exists }}"
 
- name: Ensure group for jboss service exists
  become: yes
  group:
    name: "{{ jboss_svc_username }}"
    state: present

- name: add OS user for jboss service
  become: yes
  user:
    name: "{{ jboss_svc_username }}"
    shell: "/bin/bash"
# after tests replace /bin/bash with /sbin/nologin    
    home: "{{ jboss_rootdir }}"
    groups: "{{ jboss_svc_username }}"
    
    
- name: set owner for jboss folder
  become: yes
  file:
    path: "{{ jboss_rootdir }}"
    recurse: yes
    owner: "{{ jboss_svc_username }}"
    group: "{{ jboss_svc_username }}"
    mode: 0755

# issue with jboss jar workaround (see https://stackoverflow.com/questions/48403832/javax-xml-parsers-factoryconfigurationerror-running-jboss-as-7-1-with-java-7-upd)
- name: hotfix for jboss-modules.jar
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"
  get_url:
# uncomment after tests
#    url: "{{ jboss_hotfix }}"
    url: file:///tmp/jboss-modules-1.1.5.GA.jar
    dest: "{{ jboss_rootdir }}/jboss-modules.jar"
    force: yes
  creates: "{{ jboss_rootdir }}/jboss-modules.jar"
  when: jboss_repo == "http://download.jboss.org/jbossas/7.1/jboss-as-7.1.1.Final/jboss-as-7.1.1.Final.zip"    

- name: add jboss users
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"
  command: "{{ item }}"
  with_items:
    - "{{ jboss_bindir }}/add-user.sh {{ jboss_mgmt_username }} {{ jboss_mgmt_pass }}" 
    - "{{ jboss_bindir }}/add-user.sh -a {{ jboss_app_username }} {{ jboss_app_pass }}"

- debug:
    msg: "command from previous task: ./add-user.sh {{ jboss_mgmt_username }} {{ jboss_mgmt_pass }}"

- name: create wildfly config file
  become: yes
  become_method: sudo
  template:
    src: wildfly.conf.j2
    dest: /etc/default/wildfly.conf
    owner: root
    group: root
    mode: '0644'
    backup: yes
  notify:
      - reload systemctl    

- name: create wildfly service file
  become: yes
  become_method: sudo
  template:
    src: wildfly.service.j2
    dest: /etc/systemd/system/wildfly.service
    owner: root
    group: root
    mode: '0644'
    backup: yes        

- name: create wildfly startup stript
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"
  template:
    src: launch.sh.j2
    dest: "{{ jboss_bindir }}/launch.sh"
    owner: "{{ jboss_svc_username }}"
    group: "{{ jboss_svc_username }}"
    mode: '0755'
    backup: yes   
    
- name: Make sure wildfly service is running
  become: yes
  become_method: sudo
  systemd: state=started name=wildfly.service  enabled=yes

- name: Wait 2 seconds for port 8080 to become open
  wait_for:
    port: 8080
    delay: 2
    timeout: 60

- name: Check wildfly web-service is running or not vs HTTPS 
  uri:
    url: https://localhost:8443
    validate_certs: False
    return_content: yes
  register: httpswebpage

- name: Fail if jboss.org is not in the page content
  fail:
  when: "'JBoss' not in httpswebpage.content"

- name: Check wildfly web-service is running or not vs HTTP 
  uri:
    url: http://localhost:8080
    return_content: yes
  register: httpwebpage

- name: Fail if jboss.org is not in the page content
  fail:
  when: "'JBoss' not in httpwebpage.content"          