---
# tasks file for guestbookapp

- name: Check that the gb xml file exists or not
  become: yes
  stat:
    path: "{{ jboss_deployment_dir + '/' + gb_configfile }}"
  register: xmlfilestate
 
- debug:
    msg: "filepath {{ jboss_deployment_dir + '/' + gb_configfile }} state exists {{ xmlfilestate.stat.exists }}"

#deployment
#1. cp target/example.war $AS/standalone/deployments
#2. (Manual mode only) touch $AS/standalone/deployments/example.war.dodeploy

- name: Check that the app zip in tmp exists or not
  become: yes
  stat: path="/tmp/{{ app_zipfile }}"
  register: local_gb_zipfile

- debug: 
    var: local_gb_zipfile

- debug: msg="(/tmp/{{ app_zipfile }}) exist in tmp {{ local_gb_zipfile.stat.exists }}"

- name: Download app zip and Unarchive from local tmp folder
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"  
  unarchive:
    src: "/tmp/{{ app_zipfile }}"
    dest: "{{ jboss_deployment_dir }}"
    creates: "{{ jboss_deployment_dir + '/' + gb_configfile }}"
    remote_src: yes
  when: xmlfilestate.stat.exists == False and local_gb_zipfile.stat.exists == True

- name: Download app zip and Unarchive from remote source if local source unavailable
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"  
  unarchive:
    src: "{{ application_repo }}"
    dest: "{{ jboss_deployment_dir }}"
    creates: "{{ jboss_deployment_dir + '/' + gb_configfile }}"
    remote_src: yes
  when: xmlfilestate.stat.exists == False and local_gb_zipfile.stat.exists == False


- name: fixing owner for app folder (owner was root)
  become: yes
  file:
    path: "{{ jboss_deployment_dir }}"
    recurse: yes
    owner: "{{ jboss_svc_username }}"
    group: "{{ jboss_svc_username }}"
    mode: 0755
  
- name: Check that the gb xml file finally exists
  become: yes
  stat:
    path: "{{ jboss_deployment_dir + '/' + gb_configfile }}"
  register: xmlfilestate
 
- debug:
    msg: "filepath {{ jboss_deployment_dir + '/' + gb_configfile }} state exists {{ xmlfilestate.stat.exists }}"
  
- name: Remove <elastic-load-balancer> section
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"  
  xml:
    path: "{{ jboss_deployment_dir + '/' + gb_configfile }}"
    xpath: /cumulogic-app/services/elastic-load-balancer
    state: absent
  when: xmlfilestate.stat.exists == True 
  
- name: Check that the app war file exists
  become: yes
  stat:
    path: "{{ jboss_deployment_dir + '/' + gb_warfile }}"
  register: warfilestate

- debug:
    msg: "filepath {{ jboss_deployment_dir + '/' + gb_warfile }} state finally exists {{ warfilestate.stat.exists }}"

- name: copy config file to configuration folder
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"  
  copy:
    remote_src: yes
    src: "{{ jboss_deployment_dir + '/' + gb_configfile }}"
# to use xml filename only we need .split('/')[-1] in because gb_configfile contains subdir name    
    dest: "{{ jboss_rootdir }}/standalone/configuration/{{ gb_configfile.split('/')[-1] }}"
    owner: "{{ jboss_svc_username }}"
    group: "{{ jboss_svc_username }}"
    mode: 0644
    backup: yes

- name: Check that cfg file exists in configuration folder
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"  
  stat:
    path: "{{ jboss_rootdir }}/standalone/configuration/{{ gb_configfile.split('/')[-1] }}"
  register: cfgfilestate

- name: stop if xml file was not copied
  fail:
  when: cfgfilestate.stat.exists == False

- name: remove old files
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"
  command: "rm {{ jboss_deployment_dir + '/' + gb_configfile }} {{ jboss_deployment_dir + '/' + gb_dbdump }}"
  register: remold
  
- debug:
    var: remold

#.deployed
- name: Check that the deployed state file exists
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"
  stat:
    path: "{{ jboss_deployment_dir + '/' + gb_warfile + '.deployed' }}"
  register: deployedfilestate


- name: Deploy war app in jboss/wildfly
  become: yes
  become_method: sudo
  become_user: "{{ jboss_svc_username }}"
  file:
    path: "{{ jboss_deployment_dir + '/' + gb_warfile + '.dodeploy' }}"
    state: touch
  when: warfilestate.stat.exists == True and deployedfilestate.stat.exists == False 
  
- name: Check wildfly guestbook app http url after deploy 
  uri:
    url: "http://localhost:8080/{{ app_name }}/"
    return_content: yes
#    validate_certs: False
  register: httpwebpage
  failed_when: false

- debug:
    var: httpwebpage

#- fetch:
#    src: /usr/local/share/wildfly/wildfly-12.0.0.Final/standalone/log/server.log

   